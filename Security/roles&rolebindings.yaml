# Authorization modes configured on the cluster
# $ kubectl get pods --namespace kube-system kube-apiserver-controlplane -o yaml | grep -i authorization-mode

# Roles that exist in the default namespace
# $ kubectl get roles --namespace default

# Roles bindings that exist in the default namespace
# $ kubectl get rolebuindings --namespace default

# Check for permissions
# $ kubectl auth can-i create pods --as dev-user --namespace default

# Check if dev-user can access the pods in default namespace
# $ kubectl get pods --namespace default --as dev-user

# $ kubectl create role developer --namespace default --verb=create,list,delete --resource=pods -o yaml --dry-run=client

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  creationTimestamp: null
  name: developer
  namespace: default
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - list
  - delete

# $ kubectl create rolebinding dev-user-binding --namespace default --role=developer --user=dev-user -o yaml --dry-run=client

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  name: dev-user-binding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: developer
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: User
  name: dev-user