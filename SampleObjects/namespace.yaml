# $ kubectl create -o yaml --dry-run=client namespace production > namespace.yaml

apiVersion: v1
kind: Namespace
metadata:
  creationTimestamp: null
  name: production
spec: {}
status: {}

# $ kubectl get namespaces
# $ kubectl get namespaces production -o yaml
# $ kubectl delete namespaces production
# $ kubectl apply -f namespace.yaml
# $ kubectl delete -f namespace.yaml
# $ kubectl describe namespaces production

# $ kubectl config --namespace production set-context $(kubectl config current-context)

# $ kubectl config use-context kubernetes-admin@kubernetes

# Kubectx:
# With this tool, you don't have to make use of lengthy “kubectl config” commands to switch between contexts. This tool is particularly useful to switch context between clusters in a multi-cluster environment.

# Installation:

# $ sudo git clone https://github.com/ahmetb/kubectx /opt/kubectx
# $ sudo ln -s /opt/kubectx/kubectx /usr/local/bin/kubectx

# Syntax:

# To list all contexts:
# $ kubectx

# To switch to a new context:
# $ kubectx <context_name>

# To switch back to previous context:
# $ kubectx -

# To see current context:
# $ kubectx -c

# Kubens:
# This tool allows users to switch between namespaces quickly with a simple command.

# Installation:

# $ sudo git clone https://github.com/ahmetb/kubectx /opt/kubectx
# $ sudo ln -s /opt/kubectx/kubens /usr/local/bin/kubens

# Syntax:

# To switch to a new namespace:
# $ kubens <new_namespace>

# To switch back to previous namespace:
# $ kubens -